import os
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from database import init_db, add_user, set_language, set_user_coins, count_users
from constants.admins import ADMINS

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–∞–º—è—Ç—å –≤ —Ä–∞–Ω—Ç–∞–π–º–µ: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –º–æ–Ω–µ—Ç –∏ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
user_coins = {}   # user_id -> set(['btc', 'eth', ...])
user_pages = {}   # user_id -> int (–Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
top_100_cache = []  # –ö—ç—à –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∫–æ–º–∞–Ω–¥–∞–º
menu_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="/price"),
            KeyboardButton(text="/choice_coin"),
            KeyboardButton(text="/menu")
        ]
    ],
    resize_keyboard=True
)

# ======================== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CoinGecko ========================

async def get_top_100_coins():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-100 –º–æ–Ω–µ—Ç —Å CoinGecko (–∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç)."""
    global top_100_cache
    if top_100_cache:
        return top_100_cache

    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 100}
    conn = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=conn) as session:
        async with session.get(url, params=params) as response:
            data = await response.json()
            if isinstance(data, list):
                top_100_cache = data
            else:
                top_100_cache = []
            return top_100_cache

async def get_crypto_prices(coin_ids):
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –ø–æ ID."""
    if not coin_ids:
        return {}
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": ",".join(coin_ids),
        "vs_currencies": "usd",
        "include_24hr_change": "true"
    }
    conn = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=conn) as session:
        async with session.get(url, params=params) as response:
            return await response.json()

def build_price_message(data):
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–Ω–µ—Ç –∏ –∏—Ö —Ü–µ–Ω–∞–º–∏."""
    if not data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º."
    message_parts = ["üöÄ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n"]
    for coin, values in data.items():
        emoji = "üî∏"
        price = values.get('usd', 'N/A')
        change = values.get('usd_24h_change', 0.0)
        change_icon = "üìà" if change >= 0 else "üìâ"
        message_parts.append(
            f"{emoji} <b>{coin.title()}</b>\n"
            f"‚Ä¢ ${price:,} | {change_icon} {change:.2f}% (24—á)\n"
        )
    time = datetime.utcnow().strftime('%d.%m.%Y %H:%M (UTC)')
    message_parts.append(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time}")
    return '\n'.join(message_parts)

# ======================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç ========================

async def coins_keyboard(page=0, per_page=15, selected_coins=None):
    """
    –°–æ–∑–¥–∞—ë–º InlineKeyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç:
      - 15 –º–æ–Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
      - –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–Ω–∞–∑–∞–¥-–≤–ø–µ—Ä—ë–¥).
      - –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä.
      - –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω—ã).
    """
    if selected_coins is None:
        selected_coins = set()

    coins_data = await get_top_100_coins()
    total_coins = len(coins_data)
    total_pages = (total_coins - 1) // per_page if total_coins else 0

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    page = max(0, min(page, total_pages))
    start = page * per_page
    end = min(start + per_page, total_coins)

    keyboard_buttons = []
    row = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–Ω–µ—Ç
    for coin in coins_data[start:end]:
        coin_id = coin['id']
        symbol = coin['symbol'].upper()
        prefix = "‚úÖ" if coin_id in selected_coins else "üî∏"
        row.append(InlineKeyboardButton(
            text=f"{prefix} {symbol}",
            callback_data=f"coin_{coin_id}_{page}"
        ))
        if len(row) == 3:
            keyboard_buttons.append(row)
            row = []

    if row:
        keyboard_buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}")
        )
    if page < total_pages:
        navigation_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data=f"page_{page + 1}")
        )
    if navigation_buttons:
        keyboard_buttons.append(navigation_buttons)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if selected_coins:
        control_buttons.append(
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="reset_selection")
        )
        control_buttons.append(
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_selection")
        )
    if control_buttons:
        keyboard_buttons.append(control_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

# ======================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ========================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start:
      - –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î,
      - –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫,
      - –î–∞—ë–º –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
    """
    await add_user(message.from_user.id, message.from_user.username)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
            ]
        ]
    )
    await message.answer(
        "Please, choose your language:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=keyboard
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.",
        reply_markup=menu_buttons
    )

@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /menu: –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
    """
    commands = [
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
        "/choice_coin - –í—ã–±—Ä–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–Ω–µ—Ç",
        "/price - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã",
        "/userStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    ]
    await message.answer(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands),
        reply_markup=menu_buttons
    )

@dp.message(Command("choice_coin"))
async def choice_coin(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /choice_coin: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç.
    """
    user_id = message.from_user.id
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –≤—ã–±–æ—Ä, –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π.
    if user_id not in user_coins:
        user_coins[user_id] = set()
    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî 0 (–Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π)
    user_pages[user_id] = 0

    keyboard = await coins_keyboard(page=0, selected_coins=user_coins[user_id])
    await message.answer(
        "üî∏ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–æ 3-—Ö). –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=keyboard
    )

@dp.message(Command("price"))
async def price_command(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /price: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    selected = user_coins.get(user_id)

    # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if not selected:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é /choice_coin.",
            reply_markup=menu_buttons
        )
        return

    prices = await get_crypto_prices(selected)
    msg = build_price_message(prices)
    await message.answer(msg, reply_markup=menu_buttons)

@dp.message(Command("userStats"))
async def cmd_user_stats(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /userStats: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º.
    """
    if str(message.from_user.id) not in ADMINS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º
        await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    count = await count_users()
    await message.answer(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <b>{count}</b>")

# ======================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery ========================

@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def set_user_language(callback: CallbackQuery):
    """
    –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –≤ CallbackQuery.
    """
    lang = callback.data.split("_", 1)[1]
    await set_language(callback.from_user.id, lang)

    if lang == 'en':
        text = (
            "‚úÖ Language set to English. "
            "Use /choice_coin to pick coins (up to 3)."
        )
    else:
        text = (
            "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π. "
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /choice_coin –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç (–¥–æ 3)."
        )

    await callback.message.answer(text, reply_markup=menu_buttons)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("coin_"))
async def select_coin_callback(callback: CallbackQuery):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –º–æ–Ω–µ—Ç–∫—É –≤ —Å–ø–∏—Å–∫–µ.
    –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –≤—ã–±–æ—Ä–∞, –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Å—Ä–∞–∑—É.
    """
    parts = callback.data.split("_")
    coin_id = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0

    user_id = callback.from_user.id
    user_coins.setdefault(user_id, set())
    user_pages[user_id] = page

    # –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —É–±–∏—Ä–∞–µ–º –∏–∑ –Ω–∞–±–æ—Ä–∞
    if coin_id in user_coins[user_id]:
        user_coins[user_id].remove(coin_id)
    else:
        # –ú–∞–∫—Å–∏–º—É–º 3 –º–æ–Ω–µ—Ç—ã
        if len(user_coins[user_id]) >= 3:
            await callback.answer("‚ö†Ô∏è Maximum 3 coins selected!", show_alert=True)
            return
        user_coins[user_id].add(coin_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    keyboard = await coins_keyboard(
        page=page,
        selected_coins=user_coins[user_id]
    )
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "reset_selection")
async def reset_selection(callback: CallbackQuery):
    """
    –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–æ –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞.
    """
    user_id = callback.from_user.id
    user_coins[user_id] = set()
    page = user_pages.get(user_id, 0)
    keyboard = await coins_keyboard(page=page, selected_coins=set())
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("–í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω")

@dp.callback_query(lambda c: c.data.startswith("page_"))
async def paginate_coins(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç.
    """
    page = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    user_pages[user_id] = page

    selected = user_coins.get(user_id, set())
    keyboard = await coins_keyboard(page=page, selected_coins=selected)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "confirm_selection")
async def confirm_selection(callback: CallbackQuery):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª:
      - –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –ë–î,
      - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã,
      - –£–±–∏—Ä–∞–µ–º –ø–∞–Ω–µ–ª—å (–∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É),
      - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π.
    """
    user_id = callback.from_user.id
    selected = user_coins.get(user_id, set())

    if not selected:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –ë–î
    await set_user_coins(user_id, list(selected))

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    prices = await get_crypto_prices(selected)
    msg = build_price_message(prices)

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(msg, reply_markup=menu_buttons)
    await callback.answer("–í—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

# ======================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========================
async def main():
    print("ü§ñ Bot started!")
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

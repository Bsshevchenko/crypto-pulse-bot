import os
import asyncio
import aiohttp
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –í–∞—à–∏ –º–æ–¥—É–ª–∏
from database import init_db, add_user, set_user_coins, set_language, count_users
from constants.admins import ADMINS

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ---------------------- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ----------------------
LEXICON = {
    "en": {
        "lang_prompt": "Please choose your language:",
        "language_chosen": "‚úÖ Language set to English.",
        "language_changed": "‚úÖ Language changed to English.",
        "start_user_prompt": (
            "Use /menu to see all commands or pick language below:"
        ),
        "start_chosen_lang_menu_msg": "Use the menu below to quickly access commands.",
        "unknown_command_before_lang": "You must choose your language first.",

        "choose_coins_prompt": "Choose up to 3 coins, then press ¬´Confirm¬ª.",
        "choose_coins_button_prefix_selected": "‚úÖ",
        "choose_coins_button_prefix_not_selected": "üî∏",
        "reset_selection": "üîÑ Reset",
        "confirm_selection": "‚úÖ Confirm",
        "back": "‚Üê Back",
        "forward": "Forward ‚Üí",

        "selection_cleared": "Selection cleared.",
        "must_select_at_least_one": "‚ö†Ô∏è Please select at least one coin!",
        "max_3_coins": "‚ö†Ô∏è You can select up to 3 coins only!",
        "selection_confirmed": "Selection confirmed.",

        "no_coins_chosen": "‚ö†Ô∏è You haven't chosen any coins yet. Use /choice_coin.",
        "no_data": "No data available.",
        "current_prices_header": "üöÄ <b>Current crypto prices:</b>",
        "updated_time": "‚è∞ Updated:",

        "menu_commands_header": "üìã Available commands:\n",
        "menu_start": "/start - Start bot",
        "menu_choice_coin": "/choice_coin - Select or change coins",
        "menu_price": "/price - See prices of chosen coins",
        "menu_userStats": "/userStats - User statistics (admin only)",
        "menu_menu": "/menu - Show this menu",

        "admin_denied": "üö´ Access denied",
        "userStats_count": "üìä Number of bot users: <b>{count}</b>",

        "lang_change_info": "Use buttons below to switch language."
    },
    "ru": {
        "lang_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "language_chosen": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        "language_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        "start_user_prompt": (
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–∏–∂–µ:"
        ),
        "start_chosen_lang_menu_msg": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º.",
        "unknown_command_before_lang": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!",

        "choose_coins_prompt": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–æ 3-—Ö), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        "choose_coins_button_prefix_selected": "‚úÖ",
        "choose_coins_button_prefix_not_selected": "üî∏",
        "reset_selection": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä",
        "confirm_selection": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        "back": "‚Üê –ù–∞–∑–∞–¥",
        "forward": "–í–ø–µ—Ä–µ–¥ ‚Üí",

        "selection_cleared": "–í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω.",
        "must_select_at_least_one": "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É!",
        "max_3_coins": "‚ö†Ô∏è –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –º–æ–Ω–µ—Ç—ã!",
        "selection_confirmed": "–í—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.",

        "no_coins_chosen": "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –º–æ–Ω–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /choice_coin.",
        "no_data": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º.",
        "current_prices_header": "üöÄ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>",
        "updated_time": "‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ:",

        "menu_commands_header": "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n",
        "menu_start": "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
        "menu_choice_coin": "/choice_coin - –í—ã–±–æ—Ä (–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ) –º–æ–Ω–µ—Ç",
        "menu_price": "/price - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã",
        "menu_userStats": "/userStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
        "menu_menu": "/menu - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é",

        "admin_denied": "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
        "userStats_count": "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <b>{count}</b>",

        "lang_change_info": "–ù–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫."
    }
}

# ---------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------------------
user_lang = {}  # user_lang[user_id] = 'en'/'ru' (None => –Ω–µ –≤—ã–±—Ä–∞–Ω)
user_coins = {}  # user_coins[user_id] = set(['bitcoin', 'ethereum', ...])
user_pages = {}  # user_pages[user_id] = int (–Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
top_100_cache = []  # –ö—ç—à top-100 –º–æ–Ω–µ—Ç


def get_menu_buttons(language: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="/price"),
                KeyboardButton(text="/choice_coin"),
                KeyboardButton(text="/menu"),
                KeyboardButton(text="/change_lang")  # –î–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
            ]
        ],
        resize_keyboard=True
    )


# ---------------------- –§—É–Ω–∫—Ü–∏–∏ CoinGecko ----------------------
async def get_top_100_coins():
    global top_100_cache
    if top_100_cache:
        return top_100_cache

    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "market_cap_desc", "per_page": 100}
    conn = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=conn) as session:
        async with session.get(url, params=params) as response:
            data = await response.json()
            if isinstance(data, list):
                top_100_cache = data
            else:
                top_100_cache = []
            return top_100_cache


async def get_crypto_prices(coin_ids):
    if not coin_ids:
        return {}
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": ",".join(coin_ids),
        "vs_currencies": "usd",
        "include_24hr_change": "true"
    }
    conn = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=conn) as session:
        async with session.get(url, params=params) as response:
            return await response.json()


def build_price_message(data, language: str):
    if not data:
        return LEXICON[language]["no_data"]

    header = LEXICON[language]["current_prices_header"]
    updated_label = LEXICON[language]["updated_time"]
    message_parts = [f"{header}\n"]
    for coin, values in data.items():
        emoji = "üî∏"
        price = values.get('usd', 'N/A')
        change = values.get('usd_24h_change', 0.0)
        change_icon = "üìà" if change >= 0 else "üìâ"
        message_parts.append(
            f"{emoji} <b>{coin.title()}</b>\n"
            f"‚Ä¢ ${price:,} | {change_icon} {change:.2f}% (24h)\n"
        )
    time_str = datetime.utcnow().strftime('%d.%m.%Y %H:%M (UTC)')
    message_parts.append(f"{updated_label} {time_str}")
    return "\n".join(message_parts)


# ---------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç ----------------------
async def coins_keyboard(page=0, per_page=15, selected_coins=None, language="ru"):
    if selected_coins is None:
        selected_coins = set()

    coins_data = await get_top_100_coins()
    total_coins = len(coins_data)
    if total_coins == 0:
        return InlineKeyboardMarkup(inline_keyboard=[])

    total_pages = (total_coins - 1) // per_page
    page = max(0, min(page, total_pages))

    start = page * per_page
    end = min(start + per_page, total_coins)

    kb_buttons = []
    row = []

    prefix_sel = LEXICON[language]["choose_coins_button_prefix_selected"]
    prefix_not_sel = LEXICON[language]["choose_coins_button_prefix_not_selected"]

    for coin in coins_data[start:end]:
        coin_id = coin['id']
        symbol = coin['symbol'].upper()
        prefix = prefix_sel if coin_id in selected_coins else prefix_not_sel
        row.append(
            InlineKeyboardButton(
                text=f"{prefix} {symbol}",
                callback_data=f"coin_{coin_id}_{page}"
            )
        )
        if len(row) == 3:
            kb_buttons.append(row)
            row = []
    if row:
        kb_buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_row = []
    if page > 0:
        nav_row.append(
            InlineKeyboardButton(
                text=LEXICON[language]["back"],
                callback_data=f"page_{page - 1}"
            )
        )
    if page < total_pages:
        nav_row.append(
            InlineKeyboardButton(
                text=LEXICON[language]["forward"],
                callback_data=f"page_{page + 1}"
            )
        )
    if nav_row:
        kb_buttons.append(nav_row)

    # –ö–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if selected_coins:
        reset_btn = InlineKeyboardButton(
            text=LEXICON[language]["reset_selection"],
            callback_data="reset_selection"
        )
        confirm_btn = InlineKeyboardButton(
            text=LEXICON[language]["confirm_selection"],
            callback_data="confirm_selection"
        )
        kb_buttons.append([reset_btn, confirm_btn])

    return InlineKeyboardMarkup(inline_keyboard=kb_buttons)


# ---------------------- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∑–∞–ø—Ä–µ—â–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã –¥–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ----------------------
def user_language_chosen(func):
    async def wrapper(message: Message, *args, **kwargs):
        uid = message.from_user.id
        if uid not in user_lang or user_lang[uid] is None:
            await message.answer(
                LEXICON["ru"]["unknown_command_before_lang"] + "\n" +
                LEXICON["en"]["unknown_command_before_lang"]
            )
            return
        return await func(message, *args, **kwargs)

    return wrapper


# ---------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ----------------------
@dp.message(Command("start"))
async def cmd_start(message: Message, **kwargs):
    """–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —è–∑—ã–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å."""
    user_id = message.from_user.id
    user_lang[user_id] = None

    await add_user(user_id, message.from_user.username)

    text_ru = LEXICON["ru"]["lang_prompt"]
    text_en = LEXICON["en"]["lang_prompt"]

    # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:
    msg = await message.answer(
        f"{text_ru}\n{text_en}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
                    InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
                ]
            ]
        )
    )

    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞, –µ—ë –ù–ï —É–¥–∞–ª—è–µ–º
    await message.answer(
        LEXICON["ru"]["start_user_prompt"] + "\n" +
        LEXICON["en"]["start_user_prompt"]
    )


@dp.message(Command("menu"))
@user_language_chosen
async def cmd_menu(message: Message, **kwargs):
    lang = user_lang[message.from_user.id]
    lines = [
        LEXICON[lang]["menu_commands_header"],
        LEXICON[lang]["menu_start"],
        LEXICON[lang]["menu_choice_coin"],
        LEXICON[lang]["menu_price"],
        LEXICON[lang]["menu_userStats"],
        LEXICON[lang]["menu_menu"]
    ]
    await message.answer("\n".join(lines), reply_markup=get_menu_buttons(lang))


@dp.message(Command("choice_coin"))
@user_language_chosen
async def cmd_choice_coin(message: Message, **kwargs):
    user_id = message.from_user.id
    lang = user_lang[user_id]

    user_coins[user_id] = set()
    user_pages[user_id] = 0

    keyboard = await coins_keyboard(page=0, selected_coins=set(), language=lang)
    await message.answer(LEXICON[lang]["choose_coins_prompt"], reply_markup=keyboard)


@dp.message(Command("price"))
@user_language_chosen
async def cmd_price(message: Message, **kwargs):
    user_id = message.from_user.id
    lang = user_lang[user_id]
    selected = user_coins.get(user_id, set())

    if not selected:
        await message.answer(
            LEXICON[lang]["no_coins_chosen"],
            reply_markup=get_menu_buttons(lang)
        )
        return

    prices = await get_crypto_prices(selected)
    msg = build_price_message(prices, lang)
    await message.answer(msg, reply_markup=get_menu_buttons(lang))


@dp.message(Command("userStats"))
@user_language_chosen
async def cmd_user_stats(message: Message, **kwargs):
    lang = user_lang[message.from_user.id]
    if str(message.from_user.id) not in ADMINS:
        await message.reply(LEXICON[lang]["admin_denied"])
        return

    count = await count_users()
    reply_text = LEXICON[lang]["userStats_count"].format(count=count)
    await message.answer(reply_text, reply_markup=get_menu_buttons(lang))


@dp.message(Command("change_lang"))
@user_language_chosen
async def cmd_change_lang(message: Message, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ /change_lang: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —è–∑—ã–∫–æ–≤, –Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —è–∑—ã–∫
    (–±–µ–∑ –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω–µ—Ç).
    """
    user_id = message.from_user.id
    lang = user_lang[user_id]

    text = LEXICON[lang]["lang_change_info"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
            ]
        ]
    )
    await message.answer(text, reply_markup=keyboard)


# ---------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery ----------------------
@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def callback_set_language(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    previous_lang = user_lang.get(user_id)  # None => –≤–ø–µ—Ä–≤—ã–µ
    chosen = callback.data.split("_")[1]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ (–∏ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º).
    await callback.message.delete()

    user_lang[user_id] = chosen
    await set_language(user_id, chosen)

    # –ï—Å–ª–∏ —è–∑—ã–∫ –±—ã–ª None, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if previous_lang is None:
        await callback.message.answer(LEXICON[chosen]["language_chosen"])
        # –°—Ä–∞–∑—É –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç:
        user_coins[user_id] = set()
        user_pages[user_id] = 0
        keyboard = await coins_keyboard(page=0, selected_coins=set(), language=chosen)
        await callback.message.answer(
            LEXICON[chosen]["choose_coins_prompt"],
            reply_markup=keyboard
        )
        # –ò –º–µ–Ω—é
        await callback.message.answer(
            LEXICON[chosen]["start_chosen_lang_menu_msg"],
            reply_markup=get_menu_buttons(chosen)
        )
    else:
        # –≠—Ç–æ —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
        if chosen == 'en':
            msg = LEXICON['en']["language_changed"]
        else:
            msg = LEXICON['ru']["language_changed"]
        await callback.message.answer(msg, reply_markup=get_menu_buttons(chosen))

    # –û—Ç–≤–µ—Ç, —á—Ç–æ–± —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("coin_"))
async def callback_select_coin(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    lang = user_lang.get(user_id, "ru")

    parts = callback.data.split("_", 2)
    coin_id = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0

    selected_coins = user_coins.setdefault(user_id, set())

    if coin_id in selected_coins:
        selected_coins.remove(coin_id)
    else:
        if len(selected_coins) >= 3:
            await callback.answer(
                LEXICON[lang]["max_3_coins"],
                show_alert=True
            )
            return
        selected_coins.add(coin_id)

    user_pages[user_id] = page

    keyboard = await coins_keyboard(
        page=page, selected_coins=selected_coins, language=lang
    )
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "reset_selection")
async def callback_reset_selection(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    lang = user_lang.get(user_id, "ru")

    user_coins[user_id] = set()
    page = user_pages.get(user_id, 0)

    keyboard = await coins_keyboard(page=page, selected_coins=set(), language=lang)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(LEXICON[lang]["selection_cleared"])


@dp.callback_query(lambda c: c.data.startswith("page_"))
async def callback_paginate_coins(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    lang = user_lang.get(user_id, "ru")

    page = int(callback.data.split("_")[1])
    user_pages[user_id] = page

    selected = user_coins.get(user_id, set())
    keyboard = await coins_keyboard(page=page, selected_coins=selected, language=lang)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "confirm_selection")
async def callback_confirm_selection(callback: CallbackQuery, **kwargs):
    user_id = callback.from_user.id
    lang = user_lang.get(user_id, "ru")

    selected = user_coins.get(user_id, set())
    if not selected:
        await callback.answer(
            LEXICON[lang]["must_select_at_least_one"],
            show_alert=True
        )
        return

    await set_user_coins(user_id, list(selected))
    prices = await get_crypto_prices(selected)
    msg = build_price_message(prices, lang)

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(msg, reply_markup=get_menu_buttons(lang))

    await callback.answer(LEXICON[lang]["selection_confirmed"])


# ---------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----------------------
async def main():
    print("ü§ñ Bot started!")
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

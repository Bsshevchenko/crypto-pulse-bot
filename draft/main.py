import os
import aiohttp
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = os.getenv("API_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å CoinGecko
async def get_crypto_prices():
    params = {
        'ids': 'bitcoin,ethereum,solana',
        'vs_currencies': 'usd',
        'include_24hr_change': 'true'
    }
    conn = aiohttp.TCPConnector(ssl=False)  # –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É SSL!
    async with aiohttp.ClientSession(connector=conn) as session:
        async with session.get(API_URL, params=params) as response:
            return await response.json()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
def get_change_icon(change):
    return "üìà" if change >= 0 else "üìâ"

# –ö–æ–º–∞–Ω–¥–∞ /price
@dp.message(Command("price"))
async def send_crypto_prices(message: Message):
    data = await get_crypto_prices()

    btc = data['bitcoin']
    eth = data['ethereum']
    sol = data['solana']
    time = datetime.utcnow().strftime('%d.%m.%Y %H:%M (UTC)')

    msg = (
        f"üöÄ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n"
        f"üíé <b>Bitcoin (BTC)</b>\n"
        f"‚Ä¢ ${btc['usd']:,} | {get_change_icon(btc['usd_24h_change'])} {btc['usd_24h_change']:.2f}% (24—á)\n\n"
        f"‚ô¶Ô∏è <b>Ethereum (ETH)</b>\n"
        f"‚Ä¢ ${eth['usd']:,} | {get_change_icon(eth['usd_24h_change'])} {eth['usd_24h_change']:.2f}% (24—á)\n\n"
        f"üî∑ <b>Solana (SOL)</b>\n"
        f"‚Ä¢ ${sol['usd']:,} | {get_change_icon(sol['usd_24h_change'])} {sol['usd_24h_change']:.2f}% (24—á)\n\n"
        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time}"
    )

    await message.answer(msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìå –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (BTC, ETH, SOL), –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /price"
    )
    await message.answer(welcome_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
